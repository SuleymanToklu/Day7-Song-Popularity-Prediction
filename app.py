import streamlit as st
import pandas as pd
import joblib
import requests
import base64
import time
import warnings
import os
import re

warnings.filterwarnings("ignore")

texts = {
    'page_title': {'TR': 'ÅžarkÄ± PopÃ¼lerliÄŸi Tahmini', 'EN': 'Song Popularity Prediction'},
    'main_title': {'TR': 'ðŸŽµ ÅžarkÄ± PopÃ¼lerliÄŸi Tahmincisi', 'EN': 'ðŸŽµ Song Popularity Predictor'},
    'model_error': {'TR': "Gerekli model dosyalarÄ± bulunamadÄ±. LÃ¼tfen Ã¶nce train_model.py script'ini Ã§alÄ±ÅŸtÄ±rdÄ±ÄŸÄ±nÄ±zdan emin olun.", 'EN': "Required model files not found. Please make sure you have run the `train_model.py` script first."},
    'language_label': {'TR': 'Dil', 'EN': 'Language'},
    'api_status_success': {'TR': "Spotify API baÄŸlantÄ±sÄ± baÅŸarÄ±lÄ±!", 'EN': "Spotify API connection successful!"},
    'api_status_error': {'TR': "API baÄŸlantÄ±sÄ± kurulamadÄ±. Arama Ã¶zelliÄŸi Ã§alÄ±ÅŸmayabilir.", 'EN': "Could not connect to API. Search feature may not work."},
    'tab1_title': {'TR': "ðŸŽ¤ Tahmin AracÄ±", 'EN': "ðŸŽ¤ Predictor"},
    'tab2_title': {'TR': "ðŸŽ¯ Proje DetaylarÄ±", 'EN': "ðŸŽ¯ Project Details"},
    'suggestions_header': {'TR': "âœ¨ Veri Setinden Ã–neriler", 'EN': "âœ¨ Suggestions from Dataset"},
    'refresh_button': {'TR': "Yenile", 'EN': "Refresh"},
    'search_form_label': {'TR': "Veya Spotify'da Yeni Bir ÅžarkÄ± Ara", 'EN': "Or Search for a New Song on Spotify"},
    'search_button': {'TR': 'Ara', 'EN': 'Search'},
    'search_results_header': {'TR': "Arama SonuÃ§larÄ±", 'EN': "Search Results"},
    'artist_label': {'TR': "SanatÃ§Ä±", 'EN': "Artist"},
    'predict_button': {'TR': "PopÃ¼lerliÄŸi Tahmin Et", 'EN': "Predict Popularity"},
    'prediction_header': {'TR': "ðŸ”® '{track_name}' iÃ§in Tahmin Sonucu", 'EN': "ðŸ”® Prediction Result for '{track_name}'"},
    'metric_prediction': {'TR': "Modelin Tahmini PopÃ¼lerlik PuanÄ±", 'EN': "Model's Predicted Popularity Score"},
    'metric_real': {'TR': "GerÃ§ek Spotify PopÃ¼lerlik PuanÄ±", 'EN': "Actual Spotify Popularity Score"},
    'close_button': {'TR': 'Kapat', 'EN': 'Close'},
    'tab2_summary_header': {'TR': "Proje Ã–zeti", 'EN': "Project Summary"},
    'tab2_summary_text': {'TR': "Bu uygulama, bir ÅŸarkÄ±nÄ±n ses Ã¶zelliklerini (dans edilebilirlik, enerji, tempo vb.) kullanarak o ÅŸarkÄ±nÄ±n Spotify'daki popÃ¼lerlik puanÄ±nÄ± (0-100 arasÄ±) tahmin etmek iÃ§in geliÅŸtirilmiÅŸ bir makine Ã¶ÄŸrenmesi projesidir. KullanÄ±cÄ±lar, veri setinden Ã¶nerilen ÅŸarkÄ±larÄ± analiz edebilir veya Spotify API aracÄ±lÄ±ÄŸÄ±yla yeni ÅŸarkÄ±lar arayarak hem modelin tahminini hem de ÅŸarkÄ±nÄ±n gerÃ§ek popÃ¼lerlik puanÄ±nÄ± karÅŸÄ±laÅŸtÄ±rabilir.", 'EN': "This application is a machine learning project developed to predict a song's popularity score (0-100) on Spotify using its audio features (danceability, energy, tempo, etc.). Users can analyze suggested songs from the dataset or search for new songs via the Spotify API to compare the model's prediction with the song's actual popularity score."},
    'tab2_tech_header': {'TR': "Teknik Detaylar", 'EN': "Technical Details"},
    'tab2_tech_text': {'TR': """
- **Model:** XGBoost Regressor
- **KÃ¼tÃ¼phaneler:** Streamlit, Pandas, Scikit-learn, XGBoost, Requests
- **Veri KaynaÄŸÄ±:** [Ultimate Spotify Tracks DB (Kaggle)](https://www.kaggle.com/datasets/zaheenhamidani/ultimate-spotify-tracks-db) & CanlÄ± Spotify Web API""", 'EN': """
- **Model:** XGBoost Regressor
- **Libraries:** Streamlit, Pandas, Scikit-learn, XGBoost, Requests
- **Data Source:** [Ultimate Spotify Tracks DB (Kaggle)](https://www.kaggle.com/datasets/zaheenhamidani/ultimate-spotify-tracks-db) & Live Spotify Web API"""},
    'tab2_how_header': {'TR': "NasÄ±l Ã‡alÄ±ÅŸÄ±r?", 'EN': "How It Works?"},
    'tab2_how_text': {'TR': """
1.  **Model EÄŸitimi:** Proje, `train_model.py` scripti ile `SpotifyFeatures.csv` veri setini kullanarak bir XGBoost regresyon modelini eÄŸitir ve `model.pkl` olarak kaydeder.
2.  **Veri YÃ¼kleme:** Streamlit uygulamasÄ±, bu eÄŸitilmiÅŸ modeli ve tahmin iÃ§in kullanÄ±lacak yerel veri setini baÅŸlangÄ±Ã§ta yÃ¼kler.
3.  **Tahminleme:**
    - **Veri Seti:** Veri setindeki ÅŸarkÄ±larÄ±n Ã¶zellikleri doÄŸrudan modele verilir.
    - **API AramasÄ±:** Spotify API'den aranan bir ÅŸarkÄ±nÄ±n ses Ã¶zellikleri (`audio features`) anlÄ±k olarak Ã§ekilir ve model bu canlÄ± veri ile tahmin yapar.
4.  **SonuÃ§ GÃ¶sterimi:** Modelin tahmini ve ÅŸarkÄ±nÄ±n Spotify'daki gerÃ§ek popÃ¼lerlik puanÄ± karÅŸÄ±laÅŸtÄ±rmalÄ± olarak kullanÄ±cÄ±ya sunulur.""", 'EN': """
1.  **Model Training:** The project trains an XGBoost regression model using the `SpotifyFeatures.csv` dataset with the `train_model.py` script and saves it as `model.pkl`.
2.  **Data Loading:** The Streamlit application loads this pre-trained model and the local dataset for predictions at startup.
3.  **Prediction:**
    - **From Dataset:** Features of songs from the dataset are directly fed into the model.
    - **API Search:** Audio features of a song searched via the Spotify API are fetched in real-time, and the model predicts using this live data.
4.  **Result Display:** The model's prediction and the song's actual popularity score on Spotify are presented comparatively to the user."""},
    'tab2_dev_header': {'TR': "GeliÅŸtirici", 'EN': "Developer"},
    'tab2_dev_text': {'TR': "SÃ¼leyman Toklu - Isparta UygulamalÄ± Bilimler Ãœniversitesi, Bilgisayar MÃ¼hendisliÄŸi", 'EN': "SÃ¼leyman Toklu - Isparta University of Applied Sciences, Computer Engineering"}
}

st.session_state.setdefault('tracks', [])
st.session_state.setdefault('selected_track', None)
st.session_state.setdefault('lang', 'TR')
st.session_state.setdefault('access_token', None)
st.session_state.setdefault('token_expires', 0)
st.session_state.setdefault('api_status_checked', False)
st.session_state.setdefault('suggestions', None)

lang = st.session_state.lang
st.set_page_config(page_title=texts['page_title'][lang], page_icon="ðŸŽµ", layout="wide")

@st.cache_resource
def load_model_and_features():
    try:
        model = joblib.load('model.pkl')
        model_features = joblib.load('model_features.pkl')
        return model, model_features
    except FileNotFoundError:
        return None, None

@st.cache_data
def load_local_dataset():
    try:
        df = pd.read_csv('SpotifyFeatures.csv')
        model_features_list = [
            'danceability', 'energy', 'loudness',
            'speechiness', 'acousticness', 'instrumentalness', 
            'liveness', 'valence', 'tempo', 'duration_ms'
        ]
        df['track_name'] = df['track_name'].astype(str).str.strip()
        df['artist_name'] = df['artist_name'].astype(str).str.strip()
        for col in model_features_list:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce')
        df.dropna(subset=model_features_list, inplace=True)
        df.reset_index(drop=True, inplace=True)
        return df
    except FileNotFoundError:
        return None

def get_safe_sample(df, n):
    num_rows = len(df)
    sample_size = min(n, num_rows)
    if sample_size > 0:
        return df.sample(sample_size)
    return pd.DataFrame()

def display_prediction_results(predicted_score, real_score):
    col_pred, col_real = st.columns(2)
    col_pred.metric(label=texts['metric_prediction'][lang], value=predicted_score)
    col_pred.progress(predicted_score)
    col_real.metric(label=texts['metric_real'][lang], value=real_score)
    col_real.progress(real_score)

model, model_features = load_model_and_features()
local_df = load_local_dataset()

col_title, col_lang = st.columns([12, 1])
with col_title:
    st.title(texts['main_title'][lang])
with col_lang:
    st.selectbox(
        label=texts['language_label'][lang], 
        options=['TR', 'EN'], 
        key='lang',
        label_visibility="collapsed"
    )

if not model or not model_features or local_df is None:
    st.error(texts['model_error'][lang])
    st.stop()

def get_spotify_token(client_id, client_secret):
    auth_string = f"{client_id}:{client_secret}"
    auth_bytes = auth_string.encode('utf-8')
    auth_base64 = str(base64.b64encode(auth_bytes), 'utf-8')
    url = "https://accounts.spotify.com/api/token"
    headers = {"Authorization": f"Basic {auth_base64}", "Content-Type": "application/x-www-form-urlencoded"}
    data = {"grant_type": "client_credentials"}
    result = requests.post(url, headers=headers, data=data)
    result.raise_for_status()
    json_result = result.json()
    st.session_state.access_token = json_result["access_token"]
    st.session_state.token_expires = time.time() + json_result["expires_in"]

def is_token_valid():
    return st.session_state.access_token and time.time() < st.session_state.token_expires

def spotify_search(query, token):
    url = "https://api.spotify.com/v1/search"
    headers = {"Authorization": f"Bearer {token}"}
    params = {"q": query, "type": "track", "limit": 10}
    result = requests.get(url, headers=headers, params=params)
    result.raise_for_status()
    return result.json()

def get_audio_features(track_id, token):
    url = f"http://googleusercontent.com/spotify.com/2/{track_id}"
    headers = {"Authorization": f"Bearer {token}"}
    result = requests.get(url, headers=headers)
    result.raise_for_status()
    return result.json()


api_ready = False
if not st.session_state.api_status_checked:
    try:
        cid = st.secrets["SPOTIPY_CLIENT_ID"]
        csecret = st.secrets["SPOTIPY_CLIENT_SECRET"]
        if not is_token_valid():
            get_spotify_token(cid, csecret)
        st.toast(texts['api_status_success'][lang], icon='âœ…')
        api_ready = True
    except Exception:
        st.toast(texts['api_status_error'][lang], icon='ðŸš¨')
        api_ready = False
    st.session_state.api_status_checked = True
else:
    api_ready = is_token_valid()

if st.session_state.suggestions is None:
    st.session_state.suggestions = get_safe_sample(local_df, 5)

tab1, tab2 = st.tabs([f"ðŸŽ¤ **{texts['tab1_title'][lang]}**", f"ðŸŽ¯ **{texts['tab2_title'][lang]}**"])

with tab1:
    if st.session_state.selected_track:
        track = st.session_state.selected_track
        track_name = track['name'].strip()
        
        with st.container(border=True):
            st.subheader(texts['prediction_header'][lang].format(track_name=track_name))
            
            song_features = None
            if 'source' in track and track['source'] == 'local':
                song_features = track['features']
            else:
                try:
                    song_features = get_audio_features(track['id'], st.session_state.access_token)
                except Exception as e:
                    st.error(f"ÅžarkÄ± Ã¶zellikleri alÄ±namadÄ±: {e}")

            if song_features:
                input_df = pd.DataFrame([song_features])
                input_df = input_df[model_features]
                input_df = input_df.astype(float)
                prediction = model.predict(input_df)
                popularity_score = int(prediction[0])
                display_prediction_results(popularity_score, track['popularity'])

            if st.button(texts['close_button'][lang]):
                st.session_state.selected_track = None
                st.session_state.tracks = []
                st.rerun()
    else:
        col_header, col_button = st.columns([4, 1])
        with col_header:
            st.subheader(texts['suggestions_header'][lang])
        with col_button:
            if st.button(texts['refresh_button'][lang]):
                st.session_state.suggestions = get_safe_sample(local_df, 5)
                st.rerun()

        suggestions = st.session_state.suggestions
        if not suggestions.empty:
            for i, row in suggestions.iterrows():
                col1, col2 = st.columns([4, 1])
                with col1:
                    st.write(f"**{row['track_name']}** - {row['artist_name']}")
                with col2:
                    if st.button(texts['predict_button'][lang], key=f"suggest_{i}"):
                        mock_track = {
                            'id': row['track_id'],
                            'name': row['track_name'],
                            'artists': [{'name': row['artist_name']}],
                            'popularity': row['popularity'],
                            'source': 'local',
                            'features': row.to_dict()
                        }
                        st.session_state.selected_track = mock_track
                        st.rerun()
        st.divider()

        if not api_ready:
            st.warning("API baÄŸlantÄ±sÄ± olmadan arama yapÄ±lamaz.")
        else:
            with st.form(key='search_form'):
                search_query = st.text_input(texts['search_form_label'][lang])
                search_button = st.form_submit_button(label=texts['search_button'][lang])

            if search_button and search_query:
                try:
                    results = spotify_search(search_query, st.session_state.access_token)
                    st.session_state.tracks = results['tracks']['items']
                except Exception as e:
                    st.toast(f"Arama HatasÄ±: {e}", icon='ðŸš¨')

            if st.session_state.tracks:
                st.subheader(texts['search_results_header'][lang])
                for track in st.session_state.tracks:
                    col1, col2, col3 = st.columns([1, 4, 2])
                    with col1:
                        if track['album']['images']:
                            st.image(track['album']['images'][0]['url'], width=64)
                    with col2:
                        st.write(f"**{track['name']}**")
                        st.write(f"{texts['artist_label'][lang]}: {', '.join(artist['name'] for artist in track['artists'])}")
                    with col3:
                        if st.button(texts['predict_button'][lang], key=track['id']):
                            st.session_state.selected_track = track
                            st.rerun()
                st.divider()

with tab2:
    st.subheader(texts['tab2_summary_header'][lang])
    st.write(texts['tab2_summary_text'][lang])
    st.divider()
    st.subheader(texts['tab2_tech_header'][lang])
    st.write(texts['tab2_tech_text'][lang])
    st.divider()
    st.subheader(texts['tab2_how_header'][lang])
    st.write(texts['tab2_how_text'][lang])
    st.divider()
    st.subheader(texts['tab2_dev_header'][lang])
    st.write(texts['tab2_dev_text'][lang])